{"name":"Cufflink-library","tagline":"Cuda For FOAM Link","body":"* TITLE: cufflink README for version 0.0.1\r\n* AUTHOR:   Daniel P. Combest.\r\n* DATE:     7 Sept 2011\r\n* LINK:     To Be Determined\r\n* OPTIONS:  Daniel Combest\r\n* COPYRIGHT Held by Daniel Combest\r\n\r\n# Preamble\r\n      ______  __    __   _______  _______  __       __   __   __   __  ___     \r\n     /      ||  |  |  | |   ____||   ____||  |     |  | |  \\ |  | |  |/  /     \r\n    |  ,----'|  |  |  | |  |__   |  |__   |  |     |  | |   \\|  | |  '  /  \r\n    |  |     |  |  |  | |   __|  |   __|  |  |     |  | |  . `  | |    <   \r\n    |  `----.|  `--'  | |  |     |  |     |  `----.|  | |  |\\   | |  .  \\\r\n     \\______| \\______/  |__|     |__|     |_______||__| |__| \\__| |__|\\__\\\r\n\r\nCuda For FOAM Link\r\n\r\ncufflink is a library for linking numerical methods based on Nvidia's \r\nCompute Unified Device Architecture (CUDA™) C/C++ programming language\r\nand OpenFOAM®.\r\n\r\nPlease note that cufflink is not approved or endorsed by OpenCFD® \r\nLimited, the owner of the OpenFOAM® and OpenCFD® trademarks and \r\nproducer of OpenFOAM® software.\r\n\r\nThe official web-site of OpenCFD® Limited is www.openfoam.com .\r\n\r\n# License\r\ncufflink is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\ncufflink is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with cufflink.  If not, see <http://www.gnu.org/licenses/>. \r\n\r\n# System requirements\r\ncufflink was developed and tested on Linux Ubuntu 10.04 amd64 with CUDA 4.0, \r\nThrust v1.4, and Cusp 0.2.0. To check your version of Thrust, Cusp, and cufflink, \r\nplease compile the version.cu file and run in the command line to give the output\r\n\r\n    Thrust     v1.4\r\n    Cusp       v0.2.0\r\n    Cufflink   v0.0.1\r\n\r\nCheck your version of nvcc with the command nvcc --version and the output should be similar to: \r\n    \r\n    nvcc: NVIDIA (R) Cuda compiler driver\r\n    Copyright (c) 2005-2011 NVIDIA Corporation\r\n    Built on Thu_May_12_11:09:45_PDT_2011\r\n    Cuda compilation tools, release 4.0, V0.2.1221\r\n\r\nAlso, ensure that your mpi installation is correct so that the runParallel test script can be run.  \r\nTo see whether your parallel version of openfoam is running, test the interFoam/damBreak tutorial\r\n\r\n# Installation\r\nEnsure a working OpenFOAM-1.6-ext version and that one can compile a simple \r\nOpenFOAM solver.  Ensure that CUDA 4.0, Thrust v1.4, and Cusp 0.2.0 \r\nare installed and running examples.  A simple cusp example is provided in \r\nthis directory as testcg.cu and is compiled with nvcc -o testcusp testcg.cu \r\nand run with the command ./testcusp  The output from this solver should be similar to:\r\n\r\n    Solver will continue until residual norm 0.01 or reaching 100 iterations \r\n      Iteration Number  | Residual Norm\r\n                    0       1.000000e+01\r\n                    1       1.414214e+01\r\n                    2       1.093707e+01\r\n                    3       8.949321e+00\r\n                    4       6.190057e+00\r\n                    5       3.835191e+00\r\n                    6       1.745482e+00\r\n                    7       5.963550e-01\r\n                    8       2.371136e-01\r\n                    9       1.152524e-01\r\n                   10       3.134469e-02\r\n                   11       1.144416e-02\r\n                   12       1.824177e-03\r\n    Successfully converged after 12 iterations.\r\n\r\nTo compile the solvers to be used in OpenFOAM, use the script:  \r\n\r\n    ./nvccWmakeAll <arch> > make.log 2>&1\r\n\r\nWhere <arch> is sm_10, sm_13, or sm_20 depending on your device architecture.  Many warnings are given dealing \r\nwith white spaces and tuple.inl functions and can be ignored with this version of cufflink.\r\n\r\n# Multi-GPU Implementation *****REQUIRED*****\r\nThe multi-gpu implementation REQUIRES the file lduInterface.H in cufflink to replace the OpenFOAM core file \r\nlocated in:\r\n\r\n    OpenFOAM/OpenFOAM-1.6-ext/src/OpenFOAM/matrices/lduMatrix/lduAddressing/lduInterface \r\n\r\nThis change requires a complete recompilation of openfoam.  Also, each time the multi-gpu solver is used the \r\nfirst iteration is usually the longest.  This is most likely caused by having the card in compute-mode 0 \r\nwhich allows multiple parallel cpu threads to access the same gpu.  In order to reduce this overhead \r\nassociated with cpu-gpu thread initialization, change the compute-mode to 1 by running:\r\n    \r\n    sudo /usr/bin/nvidia-smi -c 1 -g <gpu to change>\r\n\r\nwhere the <gpu to change> is an integer labeling the device number.  To find the device number, use the \r\ndeviceQuery program from the Nvidia SDK to see before and after your call of nvidia-smi.  To see supported \r\ndevices that allow compute mode changes, simply call nvidia-smi without flags or arguements.  See the \r\nfollowing thread on the cusp-users group for more information ( http://goo.gl/ojQc9 and also http://goo.gl/kc1YU ).\r\n\r\n# Running in OpenFoam\r\nOnce the cufflink library has been compiled, in order to use the code in openfoam one needs to include the line\r\n\r\n    libs (\"libCufflink.so\");\r\n\r\nin your controlDict file of the case you are running.  In addition, a solver must be chosen in the fvSolution \r\nfile under solver key word similar to:\r\n\r\n    solver cufflink_CG;\r\n    preconditioner  none;\r\n    tolerance        1e-10;\r\n    maxIter      10000;\r\n    storage         1; //COO=0 CSR=1 DIA=2 ELL=3 HYB=4 all other numbers use default CSR\r\n    gpusPerMachine  2; //for multi gpu version on a machine with 2 gpus per machine node\r\n    AinvType ;\r\n    dropTolerance ;\r\n    linStrategym ;\r\n\r\n# Testing the installation\r\nTo ensure that your original test directory is not altered and/or accidentally uploaded to the svn server, \r\nmake a copy of the cufflinkTest folder and place this in the $FOAM_RUN directory.\r\n\r\nA group of test cases has been provided in order to ensure that the install is working.  They are located in \r\nthe cufflinkTest/testCases directory and require that the cufflinkTest/testCufflinkFoam application be compiled.  Once you are ready,go the test/testCases folder and run the runSerialTests bash script to compare cufflink and OpenFOAM.  \r\nRunning the script getTimes will grep all the log files and extract time information (this script needs improvement).  \r\nClean the test cases with the Allclean script to remove data since a full test will take over 11 GB of hard drive space.\r\nTo test the parallel cases, use the runParallelTests script.  It is currently designed to run up to 6 processors and \r\ncufflinkTest/decomposeParDict file must be changed accordingly if you workstation has less than 6 processors\r\n\r\nFor additional information to be printed to the screen such as the storage method, normalization factor, etc. go \r\nto the openfoam file:\r\n\r\n        $FOAM_INST_DIR/etc/controlDict\r\n\r\nand change lduMatrix to 2.  This will print additional information to the screen to aid in debugging.\r\n\r\n\r\n# List of Contributors\r\n* Daniel P. Combest\r\n* Jeremy Day\r\n\r\n\r\n    \r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}